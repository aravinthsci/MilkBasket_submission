# -*- coding: utf-8 -*-
"""Forecasting order and revenue.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1H-xZ8zLehmRHX4OEBJ4BrtH-le5D8jJS
"""

!wget https://blume-hackathon.s3.ap-south-1.amazonaws.com/milkbasket_hackathon_data.zip

!unzip milkbasket_hackathon_data.zip

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
plt.rcParams["figure.figsize"] = (20,7)

from math import sqrt
from numpy import concatenate
from matplotlib import pyplot
from pandas import read_csv
from pandas import DataFrame
from pandas import concat
from sklearn.preprocessing import MinMaxScaler
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import mean_squared_error
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import LSTM

df = pd.read_csv("temp_bq_data/hackathon_data.csv")

df.tail()

df = df[df['subcategory_id']==1125152]

df.head()

data = df.groupby(['order_date'])['product_quantity'].sum().reset_index()

data.head()

data.count()

from matplotlib import pyplot
data.plot()
pyplot.show()

x = data.iloc[:,1].values

from statsmodels.tsa.arima_model import ARIMA
# fit model
model = ARIMA(x, order=(5,1,0))
model_fit = model.fit(disp=0)
print(model_fit.summary())

# plot residual errors
residuals = DataFrame(model_fit.resid)
residuals.plot()
pyplot.show()
residuals.plot(kind='kde')
pyplot.show()
print(residuals.describe())

x.shape

def reject_outliers(data, m=2):
    return data[abs(data - np.mean(data)) < m * np.std(data)]

X = reject_outliers(x)

x.shape

import math
from sklearn.metrics import mean_squared_error

size = int(len(X) * 0.66)
train, test = X[0:size], X[size:len(X)]
history = [x for x in train]
predictions = list()
for t in range(len(test)):
	model = ARIMA(history, order=(5,1,0))
	model_fit = model.fit(disp=0)
	output = model_fit.forecast()
	yhat = output[0]
	predictions.append(yhat)
	obs = test[t]
	history.append(obs)
	print('predicted=%f, expected=%f' % (yhat, obs))

sd = math.sqrt(mean_squared_error(test, predictions))
print('Test RMSE: %.3f' % sd)

# plot
pyplot.plot(test)
pyplot.plot(predictions, color='red')
pyplot.show()











